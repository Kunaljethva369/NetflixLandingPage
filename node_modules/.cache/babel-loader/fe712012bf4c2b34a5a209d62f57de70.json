{"ast":null,"code":"var _jsxFileName = \"D:\\\\Prerak projects\\\\prerak-mentorship-frontend\\\\Kunal\\\\React\\\\netflix\\\\src\\\\components\\\\FAQ\\\\Faq.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport CommonEmailInput from '../Common/CommonEmailInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Faq = () => {\n  _s();\n\n  const [seePara, setSeePara] = useState(false);\n\n  function paraopen() {\n    let p = document.getElementById(\"p\");\n    p.classList.toggle(\"pactive\");\n    let times = document.getElementById(\"times\");\n    times.classList.toggle(\"fa-active\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FaqContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-fluid p-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-center\",\n            children: \"Frequently Asked Questions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"accordion\",\n            id: \"accordionPanelsStayOpenExample\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"accordion-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                class: \"accordion-header\",\n                id: \"panelsStayOpen-headingOne\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  class: \"accordion-button\",\n                  type: \"button\",\n                  \"data-bs-toggle\": \"collapse\",\n                  \"data-bs-target\": \"#panelsStayOpen-collapseOne\",\n                  \"aria-expanded\": \"true\",\n                  \"aria-controls\": \"panelsStayOpen-collapseOne\",\n                  children: \"Accordion Item #1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 26,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 25,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"panelsStayOpen-collapseOne\",\n                class: \"accordion-collapse collapse show\",\n                \"aria-labelledby\": \"panelsStayOpen-headingOne\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"accordion-body\",\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"This is the first item's accordion body.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 32,\n                    columnNumber: 41\n                  }, this), \" It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n                    children: \".accordion-body\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 32,\n                    columnNumber: 460\n                  }, this), \", though the transition does limit overflow.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 31,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 30,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"accordion-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                class: \"accordion-header\",\n                id: \"panelsStayOpen-headingTwo\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  class: \"accordion-button collapsed\",\n                  type: \"button\",\n                  \"data-bs-toggle\": \"collapse\",\n                  \"data-bs-target\": \"#panelsStayOpen-collapseTwo\",\n                  \"aria-expanded\": \"false\",\n                  \"aria-controls\": \"panelsStayOpen-collapseTwo\",\n                  children: \"Accordion Item #2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 38,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"panelsStayOpen-collapseTwo\",\n                class: \"accordion-collapse collapse\",\n                \"aria-labelledby\": \"panelsStayOpen-headingTwo\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"accordion-body\",\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"This is the second item's accordion body.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 44,\n                    columnNumber: 41\n                  }, this), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n                    children: \".accordion-body\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 44,\n                    columnNumber: 462\n                  }, this), \", though the transition does limit overflow.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 43,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"accordion-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                class: \"accordion-header\",\n                id: \"panelsStayOpen-headingThree\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  class: \"accordion-button collapsed\",\n                  type: \"button\",\n                  \"data-bs-toggle\": \"collapse\",\n                  \"data-bs-target\": \"#panelsStayOpen-collapseThree\",\n                  \"aria-expanded\": \"false\",\n                  \"aria-controls\": \"panelsStayOpen-collapseThree\",\n                  children: \"Accordion Item #3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"panelsStayOpen-collapseThree\",\n                class: \"accordion-collapse collapse\",\n                \"aria-labelledby\": \"panelsStayOpen-headingThree\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"accordion-body\",\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"This is the third item's accordion body.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 56,\n                    columnNumber: 41\n                  }, this), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n                    children: \".accordion-body\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 56,\n                    columnNumber: 461\n                  }, this), \", though the transition does limit overflow.\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"email\",\n            children: /*#__PURE__*/_jsxDEV(CommonEmailInput, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Faq, \"0mAY5oCT8B6je17Zr0pupENEcAI=\");\n\n_c = Faq;\nconst FaqContainer = styled.div`\n        border-top:10px solid gray;\n        color:#000;\n    }\n`;\n_c2 = FaqContainer;\nexport default Faq;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Faq\");\n$RefreshReg$(_c2, \"FaqContainer\");","map":{"version":3,"sources":["D:/Prerak projects/prerak-mentorship-frontend/Kunal/React/netflix/src/components/FAQ/Faq.js"],"names":["React","useState","styled","CommonEmailInput","Faq","seePara","setSeePara","paraopen","p","document","getElementById","classList","toggle","times","FaqContainer","div"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport CommonEmailInput from '../Common/CommonEmailInput';\r\n\r\nconst Faq = () => {\r\n\r\n    const [seePara, setSeePara] = useState(false)\r\n\r\n    function paraopen() {\r\n        let p = document.getElementById(\"p\");\r\n        p.classList.toggle(\"pactive\")\r\n        let times = document.getElementById(\"times\");\r\n        times.classList.toggle(\"fa-active\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FaqContainer>\r\n                <div className=\"container-fluid p-5\">\r\n                    <div className=\"row\">\r\n                        <h1 className=\"text-center\">Frequently Asked Questions</h1>\r\n\r\n                        <div class=\"accordion\" id=\"accordionPanelsStayOpenExample\">\r\n                            <div class=\"accordion-item\">\r\n                                <h2 class=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\r\n                                    <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\r\n                                        Accordion Item #1\r\n                                    </button>\r\n                                </h2>\r\n                                <div id=\"panelsStayOpen-collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingOne\">\r\n                                    <div class=\"accordion-body\">\r\n                                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"accordion-item\">\r\n                                <h2 class=\"accordion-header\" id=\"panelsStayOpen-headingTwo\">\r\n                                    <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseTwo\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseTwo\">\r\n                                        Accordion Item #2\r\n                                    </button>\r\n                                </h2>\r\n                                <div id=\"panelsStayOpen-collapseTwo\" class=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingTwo\">\r\n                                    <div class=\"accordion-body\">\r\n                                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"accordion-item\">\r\n                                <h2 class=\"accordion-header\" id=\"panelsStayOpen-headingThree\">\r\n                                    <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseThree\" aria-expanded=\"false\" aria-controls=\"panelsStayOpen-collapseThree\">\r\n                                        Accordion Item #3\r\n                                    </button>\r\n                                </h2>\r\n                                <div id=\"panelsStayOpen-collapseThree\" class=\"accordion-collapse collapse\" aria-labelledby=\"panelsStayOpen-headingThree\">\r\n                                    <div class=\"accordion-body\">\r\n                                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"email\">\r\n                            <CommonEmailInput />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </FaqContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nconst FaqContainer = styled.div`\r\n        border-top:10px solid gray;\r\n        color:#000;\r\n    }\r\n`\r\n\r\nexport default Faq\r\n"]},"metadata":{},"sourceType":"module"}